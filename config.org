#+TITLE: Marty's GNU Emacs Config
#+AUTHOR: Marty Buchaus
#+STARTUP: showeverything
#+OPTIONS: num:nil ^:{}

* Default and initial settings

#+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   (scroll-bar-mode -1)
   (tool-bar-mode -1)
   (tooltip-mode -1)
   (menu-bar-mode -1)
   (set-fringe-mode 10)
   (setq visible-bell t)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
* Packages (use-package) & quelpa

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org"   . "https://orgmode.org/elpa")
			   ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)
#+end_src

* Garbage Collection

#+begin_src emacs-lisp

  (use-package gcmh
    :config
    (gcmh-mode 1))

  (setq gc-cons-threshold 402653184
	gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

* Native Compile
#+begin_src emacs-lisp
  (if (boundp 'comp-deferred-compilation)
      (setq comp-deferred-compilation nil)
      (setq native-comp-deferred-compilation nil))
  (setq load-prefer-newer noninteractive)
#+end_src

* UI
** Fonts
Defining our fonts.  Right now I'm using Source Code Pro (SauceCodePro) from the nerd-fonts repository.  Installed from the AUR, it does =NOT= include all variations of the font (such as italics).  You can download the italics Source Code Pro font from the nerd-fonts GitHub though.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "Source Code Pro"
    :height 150
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu Nerd Font"
    :height 170
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "Source Code Pro"
    :height 150
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)
  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 130)
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)
#+end_src

#+RESULTS:
: t

#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package dracula-theme
    :config
    (load-theme 'dracula t))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :config
    (setq doom-modeline-height 30)
    (setq doom-modeline-mu4e t)
    (setq doom-modeline-gnus nil)
    (doom-modeline-mode 1))
#+end_src

#+RESULTS:
: t

* Keybindings & Evil
** EVIL
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integrationt t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  :config
  (evil-mode 1)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))
#+end_src
** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
#+end_src

** Evil Tutor
#+begin_src emacs-lisp
(use-package evil-tutor)
#+end_src
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t))

#+end_src
** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-show-early-on-C-h t
	  which-key-separator " â†’ " ))
  (which-key-mode)
#+end_src

#+RESULTS:
: t

** Key Maps
*** / override
#+begin_src emacs-lisp
  (nvmap :keymaps 'override :prefix "SPC"
       "SPC"   '(execute-extended-command :which-key "M-x")
         "b"   '(:ignore :which-key "buffer"))
#+end_src

#+RESULTS:

*** B

#+begin_src emacs-lisp
  (nvmap :keymaps 'override :prefix "SPC" 
	 "b b"   '(ibuffer :which-key "Ibuffer")
	 "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
	 "b k"   '(kill-current-buffer :which-key "Kill current buffer")
	 "b n"   '(next-buffer :which-key "Next buffer")
	 "b p"   '(previous-buffer :which-key "Previous buffer")
	 "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
	 "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

#+RESULTS:

#+end_src

*** D

#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
		 "d d" '(dired :which-key "Open dired")
		 "d j" '(dired-jump :which-key "Dired jump to current")
		 "d p" '(peep-dired :which-key "Peep-dired"))
#+end_src

*** E

**** Evil Define Key

#+begin_src emacs-lisp
  ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
  (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
  (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
#+end_src

#+RESULTS:

**** Evaluate Elisp
I took this from DT but I need to move to localleader binding
#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
	 "e b"   '(eval-buffer :which-key "Eval elisp in buffer")
	 "e d"   '(eval-defun :which-key "Eval defun")
	 "e e"   '(eval-expression :which-key "Eval elisp expression")
	 "e l"   '(eval-last-sexp :which-key "Eval last sexression")
	 "e r"   '(eval-region :which-key "Eval region"))
#+end_src

*** F

#+begin_src emacs-lisp

  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC" :which-key "Files"
	 "."     '(find-file :which-key "Find file")
	 "f f"   '(find-file :which-key "Find file")
	 "f r"   '(counsel-recentf :which-key "Recent files")
	 "f s"   '(save-buffer :which-key "Save file")
	 "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
	 "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
	 "f C"   '(copy-file :which-key "Copy file")
	 "f D"   '(delete-file :which-key "Delete file")
	 "f R"   '(rename-file :which-key "Rename file")
	 "f S"   '(write-file :which-key "Save file as...")
	 "f U"   '(sudo-edit :which-key "Sudo edit file"))

#+end_src

#+RESULTS:

*** H
#+begin_src emacs-lisp
(nvmap :keymaps 'override :prefix "SPC"
       "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config"))
#+end_src

#+RESULTS:

*** T
#+begin_src emacs-lisp
  (nvmap :keymaps 'override :prefix "SPC"
       "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines"))
#+end_src

#+RESULTS:

* Completion
** Vertico

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))  
#+end_src

** Savehist
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

** orderless

#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))


  ;; Consult users will also want the embark-consult package.
#+end_src

** Embark consult

#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
)

#+end_src



* Modules & Packages
** All the Icons

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

*** Configuring Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.config/myemacs/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src

*** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Dired
#+begin_src emacs-lisp

  (use-package all-the-icons-dired)
  (use-package dired-open)
  (use-package peep-dired)

  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  ;; Get file icons in dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; With dired-open plugin, you can launch external programs for certain extensions
  ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
  (setq dired-open-extensions '(("gif" . "sxiv")
				("jpg" . "sxiv")
				("png" . "sxiv")
				("mkv" . "mpv")
				("mp4" . "mpv")))
#+end_src

#+RESULTS:

** Files
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

